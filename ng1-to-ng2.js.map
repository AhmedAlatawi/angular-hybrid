{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9df54dd622b5fc13c815","webpack:///./ng1-to-ng2.ts","webpack:///external {\"root\":\"angular\",\"amd\":\"angular\",\"commonjs2\":\"angular\",\"commonjs\":\"angular\"}","webpack:///external {\"root\":\"angular-ui-router\",\"amd\":\"angular-ui-router\",\"commonjs2\":\"angular-ui-router\",\"commonjs\":\"angular-ui-router\"}","webpack:///external {\"root\":\"ui-router-ng2\",\"amd\":\"ui-router-ng2\",\"commonjs2\":\"ui-router-ng2\",\"commonjs\":\"ui-router-ng2\"}","webpack:///external {\"root\":\"ui-router-rx\",\"amd\":\"ui-router-rx\",\"commonjs2\":\"ui-router-rx\",\"commonjs\":\"ui-router-rx\"}","webpack:///external {\"root\":\"@angular/core\",\"amd\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"commonjs\":\"@angular/core\"}"],"names":[],"mappings":"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","file":"ng1-to-ng2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"angular-ui-router\"), require(\"ui-router-ng2\"), require(\"ui-router-rx\"), require(\"@angular/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ui-router-ng1-to-ng2\", [\"angular\", \"angular-ui-router\", \"ui-router-ng2\", \"ui-router-rx\", \"@angular/core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ui-router-ng1-to-ng2\"] = factory(require(\"angular\"), require(\"angular-ui-router\"), require(\"ui-router-ng2\"), require(\"ui-router-rx\"), require(\"@angular/core\"));\n\telse\n\t\troot[\"ui-router-ng1-to-ng2\"] = factory(root[\"angular\"], root[\"angular-ui-router\"], root[\"ui-router-ng2\"], root[\"ui-router-rx\"], root[\"@angular/core\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9df54dd622b5fc13c815","import * as angular from 'angular';\n\nimport { $InjectorLike, Ng1ViewConfig, StateObject, StateProvider } from 'angular-ui-router';\n\nimport {\n  _UIROUTER_SERVICE_PROVIDERS, applyModuleConfig, forEach, NATIVE_INJECTOR_TOKEN, Ng2ViewConfig, Ng2ViewDeclaration,\n  ParentUIViewInject, PathNode, Resolvable, StateRegistry, StatesModule, UIRouter, UIROUTER_MODULE_TOKEN,\n  UIROUTER_ROOT_MODULE, UIRouterModule, UIView, ViewConfig, ViewService, ng2LazyLoadBuilder\n} from 'ui-router-ng2';\n\nimport { UIRouterRx } from \"ui-router-rx\";\n\nimport { Component, ElementRef, Inject, Injector, Input, NgModule } from '@angular/core';\nimport { UpgradeAdapter } from '@angular/upgrade';\n\n/**\n * Create a ng1 module for the ng1 half of the hybrid application to depend on.\n *\n * Example:\n * let myApp = angular.module('myApp', ['ui.router.upgrade']);\n */\nexport let upgradeModule = angular.module('ui.router.upgrade', ['ui.router']);\nexport let ng1InitModule = angular.module('ui.router.init');\n\n/**\n * UIViewNgUpgrade is a component bridge from ng1 ui-view to ng2 ui-view\n *\n * When a ui-router for ng1 is registering a state it checks if a view's\n * `component:` is an ng2 Component class. If so, it creates a special ng1 template\n * which references this component, i.e., <ui-view-ng-upgrade></ui-view-ng-upgrade>\n *\n * See that code by searching ng1-to-ng2 source for: \"$stateProvider.decorator\"\n *\n * ---\n *\n * ng1-to-ng2 component bridge process:\n *\n * 1)\n * When an ng1 template creates a ui-view which is targeted by a ng2 Component,\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ui-view created in ng1 template -->\n * </div> <!-- targeted with { component: Ng2RoutedComponent } -->\n * ```\n *\n * the state decorator spits out a custom template.  That template loads this\n * ng2 Component adapter as a downgraded-to-ng1 directive.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- decorated template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- downgraded adapter component -->\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This downgraded ng2 Component then creates a child UIView (ng2 component)\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- custom template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter downgraded to ng1-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n*      </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * which in turn is filled with the routed ng2 component.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ng1 ui-view -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter (downgraded to ng1)-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *       <ng2-routed-component> <!-- ng2 component hosted in ng2 ui-view -->\n *         <h1>ng2 routed component contents</h1>\n *       </ng2-routed-component>\n *     </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This adapter exposes exposes the parent view context (ParentUIViewInject)\n * as an ng2 DI Provider, which the nested ng2 UIView requires.\n *\n * It gets the ParentUIViewContext information (from the parent ng1 ui-view) by walking\n * up the DOM and grabbing the .data('$uiView') which the ng1 ui-view directive exposes.\n */\n@Component({\n  selector: 'ui-view-ng-upgrade',\n  template: `<ui-view [name]=\"name\"></ui-view>`,\n  // provide a blank object as PARENT_INJECT.\n  // The component will add property getters when it is constructed.\n  viewProviders: [ { provide: UIView.PARENT_INJECT, useValue: { } } ],\n})\nexport class UIViewNgUpgrade {\n  // The ui-view's name (or '$default')\n  @Input() private name: string;\n\n  constructor(\n      ref: ElementRef,\n      @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject,\n      registry: StateRegistry // access the root state\n  ) {\n    // From the ui-view-ng-upgrade component's element ref, walk up the DOM two elements...\n    // There will first be an ng1 ui-view which hosts this element, and then that ui-view's parent element.\n    // That (parent) element has access to the proper \"parent viewcontext\"\n\n    // The ng2 ui-view component is inside this ui-view-ng-upgrade directive, which is inside the ng1 \"host\" ui-view.\n    // Both ui-views share the same \"view context\" information (the view's fqn and created-by-state context information)\n    let ng1elem = angular.element(ref.nativeElement).parent().parent();\n\n    // Expose getters on PARENT_INJECT for context (creation state) and fqn (view address)\n    // These will be used by further nested UIView\n    Object.defineProperty(parent, \"context\", {\n      get: function() {\n        let data = ng1elem['inheritedData']('$uiView');\n        return (data && data.$cfg) ? data.$cfg.viewDecl.$context : registry.root();\n      },\n      enumerable: true\n    });\n\n    Object.defineProperty(parent, \"fqn\", {\n      get: function() {\n        let data = ng1elem['inheritedData']('$uiView');\n        return (data && data.$uiView) ? data.$uiView.fqn : null;\n      },\n      enumerable: true\n    });\n  }\n}\n\n/**********************************\n * Ng2 @NgModule and bootstrap code\n **********************************/\n\n// Register the ng1 DI '$uiRouter' object as an ng2 Provider.\nfunction uiRouterUpgradeFactory(router: UIRouter, injector: Injector) {\n  let modules: StatesModule[] = injector.get(UIROUTER_MODULE_TOKEN, []);\n  modules.forEach(module => applyModuleConfig(router, injector, module));\n  return router;\n}\n\n/**\n * This NgModule should be added to the root module of the hybrid app.\n */\n@NgModule({\n  imports: [UIRouterModule],\n  declarations: [UIViewNgUpgrade],\n  providers: [\n    // ui-router-ng2 code will use the ng1 $uiRouter instance instead of creating its own.\n    { provide: UIRouter, useFactory: uiRouterUpgradeFactory, deps: ['$uiRouter', Injector] },\n\n    { provide: UIROUTER_ROOT_MODULE, useValue: {}, multi: true },\n\n    ..._UIROUTER_SERVICE_PROVIDERS,\n\n    {\n      provide: UIView.PARENT_INJECT,\n      deps: [StateRegistry],\n      useFactory: (r: StateRegistry) => {\n        return { fqn: null, context: r.root() } as ParentUIViewInject\n      },\n    },\n  ],\n  exports: [UIViewNgUpgrade, UIRouterModule]\n}) export class Ng1ToNg2Module {}\n\n/**\n * This function applies the ng1-to-ng2 hybrid adapter\n *\n * ---\n *\n * - expose the ng1 $uiRouter instance to ng2 DI\n * - downgrade the ng2 UIViewNgUpgrade for use in ng1 templates\n * - expose the root ng2 Injector as a resolve on the root state\n * - decorate state `views:` with ng1/ng2 component detection\n *   when ng1 is detected, use <ui-view-ng-upgrade> adapter directive as template\n * - register the ng2 ViewConfigFactory\n * - register the ng1-to-ng2 ViewConfigFactory\n *   allows both ng1 and ng2 ui-views to activate\n */\nfunction applyHybridAdapter(upgradeAdapter: UpgradeAdapter) {\n  // Expose the ng1 DI '$uiRouter' instance as an ng2 Provider.\n  upgradeAdapter.upgradeNg1Provider('$uiRouter');\n\n  // Downgrade the UIViewNgUpgrade ng2 Component to an ng1 directive.\n  // The directive is used in a (generated) view template by the (host) ng1 ui-router,\n  // whenever it finds a view configured with a `component: <Ng2ComponentClass>`\n  upgradeModule.directive(\"uiViewNgUpgrade\", <any> upgradeAdapter.downgradeNg2Component(UIViewNgUpgrade));\n\n  upgradeModule.run(['$injector', (ng1Injector: $InjectorLike) => {\n    let $uiRouter: UIRouter = ng1Injector.get('$uiRouter');\n\n    // Expose a merged ng1/ng2 injector as a Resolvable (on the root state).\n    // This mimics how ui-router-ng2 exposes the root ng2 Injector, but\n    // it retrieves from ng1 injector first, then ng2 injector if the token isn't found.\n    const mergedInjector = {\n      get: function(token: any, ng2NotFoundValue?: any) {\n        let ng2Injector = ng1Injector.get('ng2.Injector');\n        return (ng1Injector.has(token) && ng1Injector.get(token)) || ng2Injector.get(token, ng2NotFoundValue)\n      }\n    };\n\n    let ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, mergedInjector);\n    $uiRouter.stateRegistry.root().resolvables.push(ng2InjectorResolvable);\n  }]);\n\n\n  upgradeModule.config(['$stateProvider', ($stateProvider: StateProvider) => {\n  }]);\n\n  upgradeModule.config(['$uiRouterProvider', ($uiRouterProvider: UIRouter) => {\n    let registry = $uiRouterProvider.stateRegistry;\n\n    /** Applies the `UIRouterRx` plugin for observable states/params */\n    $uiRouterProvider.plugin(UIRouterRx);\n\n    /** Adds the ng2 `loadChildren` lazy loading decorator */\n    registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n    /**\n     * Adds a state decorator which modifies a state's view configuration as it's being registered.\n     *\n     * ---\n     *\n     * Define a stateProvider `views` builder decorator.\n     * The decorator first applies the standard views builder function.\n     * Then it finds any view components which are **actually** a Ng2 Component Class.\n     * It overwrites that view's config with a ng1-to-ng2 hybrid config.\n     *\n     * In place of the template provider, it simply puts a <ui-view-ng-upgrade/> component\n     * which that provides a ng1 -> ng2 boundary in the component tree.\n     */\n    registry.decorator('views', function(state: StateObject, parentFn: Function) {\n      let views = parentFn(state);\n\n      forEach(views, (viewDecl: any, viewName: string) => {\n        if (viewDecl.$type === 'ng1-to-ng2' || isNg2ComponentClass(viewDecl.component)) {\n          // Update the view config.\n          // Override default ng1 `component:` behavior (of defining a templateProvider)\n          // with a <ui-view-ng-upgrade> adapter directive template\n          viewDecl.$type = \"ng1-to-ng2\";\n          viewDecl.templateProvider = null;\n          viewDecl.template = `<ui-view-ng-upgrade name='${viewDecl.$uiViewName}'></ui-view-ng-upgrade>`;\n        }\n      });\n      return views;\n    });\n  }]);\n\n  // UI-Router ViewConfig factories take a view declaration object from a state.views: { foo: <ViewDeclaration> }\n  // and return a runtime config object (a ViewConfig)\n  upgradeModule.run(['$view', '$templateFactory', ($view: ViewService, $templateFactory) => {\n    // Register a ViewConfig factory for views of type `ng2`\n    $view._pluginapi._viewConfigFactory('ng2', (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config));\n\n    // Register a ViewConfig factory for views of type `ng1-to-ng2`.\n    // Returns both an ng1 config and an ng2 config allowing either ng1 or ng2 ui-view components to be targeted.\n    $view._pluginapi._viewConfigFactory('ng1-to-ng2', (path: PathNode[], config: Ng2ViewDeclaration) => {\n      let ng1ViewConfig: ViewConfig = <any> new Ng1ViewConfig(<any> path, <any> Object.assign({}, config, { $type: 'ng1'}), $templateFactory);\n      let ng2ViewConfig: ViewConfig = <any> new Ng2ViewConfig(<any> path, <any> Object.assign({}, config, { $type: 'ng2'}));\n\n      return [ ng2ViewConfig, ng1ViewConfig ];\n    });\n  }])\n}\n\n/** Predicate fn that returns true if an object is a NG2 Component Class */\nexport function isNg2ComponentClass(def: any) {\n  if (typeof def !== 'function') return false;\n\n  return Reflect['getMetadata']('annotations', def)\n      .find((x: any) => x instanceof Component);\n}\n\n\n/**\n * Hybrid apps should import this and call `uiRouterNgUpgrade.setUpgradeAdapter(adapter)`.\n * This will register the ui-router hybrid adapter code.\n */\nexport let uiRouterNgUpgrade = {\n  setUpgradeAdapter: function(upgradeAdapter: UpgradeAdapter) {\n    applyHybridAdapter(upgradeAdapter);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./ng1-to-ng2.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"angular\",\"amd\":\"angular\",\"commonjs2\":\"angular\",\"commonjs\":\"angular\"}\n// module id = 1\n// module chunks = 0 1","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"angular-ui-router\",\"amd\":\"angular-ui-router\",\"commonjs2\":\"angular-ui-router\",\"commonjs\":\"angular-ui-router\"}\n// module id = 2\n// module chunks = 0 1","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"ui-router-ng2\",\"amd\":\"ui-router-ng2\",\"commonjs2\":\"ui-router-ng2\",\"commonjs\":\"ui-router-ng2\"}\n// module id = 3\n// module chunks = 0 1","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"ui-router-rx\",\"amd\":\"ui-router-rx\",\"commonjs2\":\"ui-router-rx\",\"commonjs\":\"ui-router-rx\"}\n// module id = 4\n// module chunks = 0 1","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"@angular/core\",\"amd\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"commonjs\":\"@angular/core\"}\n// module id = 5\n// module chunks = 0 1"],"sourceRoot":""}